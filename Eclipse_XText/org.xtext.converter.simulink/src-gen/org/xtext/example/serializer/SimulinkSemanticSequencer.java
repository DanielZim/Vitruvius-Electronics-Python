/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.services.SimulinkGrammarAccess;
import org.xtext.example.simulink.BaseElement;
import org.xtext.example.simulink.MatrixElement;
import org.xtext.example.simulink.Root;
import org.xtext.example.simulink.SimulinkPackage;
import org.xtext.example.simulink.StringElement;
import org.xtext.example.simulink.SubElement;
import org.xtext.example.simulink.VectorElement;

@SuppressWarnings("all")
public class SimulinkSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimulinkGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimulinkPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimulinkPackage.BASE_ELEMENT:
				sequence_BaseElement(context, (BaseElement) semanticObject); 
				return; 
			case SimulinkPackage.MATRIX_ELEMENT:
				sequence_MatrixElement(context, (MatrixElement) semanticObject); 
				return; 
			case SimulinkPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case SimulinkPackage.STRING_ELEMENT:
				sequence_StringElement(context, (StringElement) semanticObject); 
				return; 
			case SimulinkPackage.SUB_ELEMENT:
				sequence_SubElement(context, (SubElement) semanticObject); 
				return; 
			case SimulinkPackage.VECTOR_ELEMENT:
				sequence_VectorElement(context, (VectorElement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Element returns BaseElement
	 *     BaseElement returns BaseElement
	 *
	 * Constraint:
	 *     (name=ID value=BaseValue)
	 */
	protected void sequence_BaseElement(ISerializationContext context, BaseElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimulinkPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimulinkPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SimulinkPackage.Literals.BASE_ELEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimulinkPackage.Literals.BASE_ELEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBaseElementAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBaseElementAccess().getValueBaseValueParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MatrixElement
	 *     MatrixElement returns MatrixElement
	 *
	 * Constraint:
	 *     (name=ID value+=BaseValue? value+=BaseValue* (value+=BaseValue | value+=BaseValue)*)
	 */
	protected void sequence_MatrixElement(ISerializationContext context, MatrixElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     rootElement+=SubElement+
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns StringElement
	 *     StringElement returns StringElement
	 *
	 * Constraint:
	 *     (name=ID value+=STRING value+=STRING*)
	 */
	protected void sequence_StringElement(ISerializationContext context, StringElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubElement returns SubElement
	 *     Element returns SubElement
	 *
	 * Constraint:
	 *     (name=ID element+=Element*)
	 */
	protected void sequence_SubElement(ISerializationContext context, SubElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns VectorElement
	 *     VectorElement returns VectorElement
	 *
	 * Constraint:
	 *     (name=ID value+=BaseValue? value+=BaseValue*)
	 */
	protected void sequence_VectorElement(ISerializationContext context, VectorElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
