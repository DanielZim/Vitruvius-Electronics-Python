/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimulinkGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.Root");
		private final Assignment cRootElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootElementSubElementParserRuleCall_0 = (RuleCall)cRootElementAssignment.eContents().get(0);
		
		//Root:
		//	rootElement+=SubElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//rootElement+=SubElement*
		public Assignment getRootElementAssignment() { return cRootElementAssignment; }
		
		//SubElement
		public RuleCall getRootElementSubElementParserRuleCall_0() { return cRootElementSubElementParserRuleCall_0; }
	}
	public class SubElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.SubElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubElement:
		//	name=ID '{' element+=Element* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' element+=Element* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//element+=Element*
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_2_0() { return cElementElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBaseElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVectorElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMatrixElementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringElementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Element:
		//	SubElement | BaseElement | VectorElement | MatrixElement | StringElement;
		@Override public ParserRule getRule() { return rule; }
		
		//SubElement | BaseElement | VectorElement | MatrixElement | StringElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SubElement
		public RuleCall getSubElementParserRuleCall_0() { return cSubElementParserRuleCall_0; }
		
		//BaseElement
		public RuleCall getBaseElementParserRuleCall_1() { return cBaseElementParserRuleCall_1; }
		
		//VectorElement
		public RuleCall getVectorElementParserRuleCall_2() { return cVectorElementParserRuleCall_2; }
		
		//MatrixElement
		public RuleCall getMatrixElementParserRuleCall_3() { return cMatrixElementParserRuleCall_3; }
		
		//StringElement
		public RuleCall getStringElementParserRuleCall_4() { return cStringElementParserRuleCall_4; }
	}
	public class BaseElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.BaseElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBaseValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BaseElement:
		//	name=ID value=BaseValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID value=BaseValue
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value=BaseValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//BaseValue
		public RuleCall getValueBaseValueParserRuleCall_1_0() { return cValueBaseValueParserRuleCall_1_0; }
	}
	public class VectorElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.VectorElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBaseValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBaseValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VectorElement:
		//	name=ID '[' value+=BaseValue? (',' value+=BaseValue)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '[' value+=BaseValue? (',' value+=BaseValue)* ']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//value+=BaseValue?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BaseValue
		public RuleCall getValueBaseValueParserRuleCall_2_0() { return cValueBaseValueParserRuleCall_2_0; }
		
		//(',' value+=BaseValue)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//value+=BaseValue
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//BaseValue
		public RuleCall getValueBaseValueParserRuleCall_3_1_0() { return cValueBaseValueParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class MatrixElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.MatrixElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBaseValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBaseValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueBaseValueParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cValueAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cValueBaseValueParserRuleCall_4_2_1_0 = (RuleCall)cValueAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MatrixElement:
		//	name=ID '[' value+=BaseValue? (',' value+=BaseValue)* (';' value+=BaseValue? (',' value+=BaseValue)*)+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '[' value+=BaseValue? (',' value+=BaseValue)* (';' value+=BaseValue? (',' value+=BaseValue)*)+ ']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//value+=BaseValue?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BaseValue
		public RuleCall getValueBaseValueParserRuleCall_2_0() { return cValueBaseValueParserRuleCall_2_0; }
		
		//(',' value+=BaseValue)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//value+=BaseValue
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//BaseValue
		public RuleCall getValueBaseValueParserRuleCall_3_1_0() { return cValueBaseValueParserRuleCall_3_1_0; }
		
		//(';' value+=BaseValue? (',' value+=BaseValue)*)+
		public Group getGroup_4() { return cGroup_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//value+=BaseValue?
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//BaseValue
		public RuleCall getValueBaseValueParserRuleCall_4_1_0() { return cValueBaseValueParserRuleCall_4_1_0; }
		
		//(',' value+=BaseValue)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//value+=BaseValue
		public Assignment getValueAssignment_4_2_1() { return cValueAssignment_4_2_1; }
		
		//BaseValue
		public RuleCall getValueBaseValueParserRuleCall_4_2_1_0() { return cValueBaseValueParserRuleCall_4_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class StringElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.StringElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StringElement:
		//	name=ID value+=STRING value+=STRING*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID value+=STRING value+=STRING*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value+=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//value+=STRING*
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class BaseValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.BaseValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatExpValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIdValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BaseValue:
		//	FloatValue | FloatExpValue | IntValue | IdValue;
		@Override public ParserRule getRule() { return rule; }
		
		//FloatValue | FloatExpValue | IntValue | IdValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_0() { return cFloatValueParserRuleCall_0; }
		
		//FloatExpValue
		public RuleCall getFloatExpValueParserRuleCall_1() { return cFloatExpValueParserRuleCall_1; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_2() { return cIntValueParserRuleCall_2; }
		
		//IdValue
		public RuleCall getIdValueParserRuleCall_3() { return cIdValueParserRuleCall_3; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.FloatValue");
		private final RuleCall cFLOATTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FloatValue:
		//	FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall() { return cFLOATTerminalRuleCall; }
	}
	public class FloatExpValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.FloatExpValue");
		private final RuleCall cFLOAT_XTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FloatExpValue:
		//	FLOAT_X;
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT_X
		public RuleCall getFLOAT_XTerminalRuleCall() { return cFLOAT_XTerminalRuleCall; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.IntValue");
		private final RuleCall cINT_XTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntValue:
		//	INT_X;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_X
		public RuleCall getINT_XTerminalRuleCall() { return cINT_XTerminalRuleCall; }
	}
	public class IdValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.IdValue");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IdValue:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final RootElements pRoot;
	private final SubElementElements pSubElement;
	private final ElementElements pElement;
	private final BaseElementElements pBaseElement;
	private final VectorElementElements pVectorElement;
	private final MatrixElementElements pMatrixElement;
	private final StringElementElements pStringElement;
	private final BaseValueElements pBaseValue;
	private final FloatValueElements pFloatValue;
	private final FloatExpValueElements pFloatExpValue;
	private final IntValueElements pIntValue;
	private final IdValueElements pIdValue;
	private final TerminalRule tFLOAT;
	private final TerminalRule tFLOAT_X;
	private final TerminalRule tINT_X;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimulinkGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pSubElement = new SubElementElements();
		this.pElement = new ElementElements();
		this.pBaseElement = new BaseElementElements();
		this.pVectorElement = new VectorElementElements();
		this.pMatrixElement = new MatrixElementElements();
		this.pStringElement = new StringElementElements();
		this.pBaseValue = new BaseValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pFloatExpValue = new FloatExpValueElements();
		this.pIntValue = new IntValueElements();
		this.pIdValue = new IdValueElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.FLOAT");
		this.tFLOAT_X = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.FLOAT_X");
		this.tINT_X = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.INT_X");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Simulink.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Simulink".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	rootElement+=SubElement*;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//SubElement:
	//	name=ID '{' element+=Element* '}';
	public SubElementElements getSubElementAccess() {
		return pSubElement;
	}
	
	public ParserRule getSubElementRule() {
		return getSubElementAccess().getRule();
	}
	
	//Element:
	//	SubElement | BaseElement | VectorElement | MatrixElement | StringElement;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//BaseElement:
	//	name=ID value=BaseValue;
	public BaseElementElements getBaseElementAccess() {
		return pBaseElement;
	}
	
	public ParserRule getBaseElementRule() {
		return getBaseElementAccess().getRule();
	}
	
	//VectorElement:
	//	name=ID '[' value+=BaseValue? (',' value+=BaseValue)* ']';
	public VectorElementElements getVectorElementAccess() {
		return pVectorElement;
	}
	
	public ParserRule getVectorElementRule() {
		return getVectorElementAccess().getRule();
	}
	
	//MatrixElement:
	//	name=ID '[' value+=BaseValue? (',' value+=BaseValue)* (';' value+=BaseValue? (',' value+=BaseValue)*)+ ']';
	public MatrixElementElements getMatrixElementAccess() {
		return pMatrixElement;
	}
	
	public ParserRule getMatrixElementRule() {
		return getMatrixElementAccess().getRule();
	}
	
	//StringElement:
	//	name=ID value+=STRING value+=STRING*;
	public StringElementElements getStringElementAccess() {
		return pStringElement;
	}
	
	public ParserRule getStringElementRule() {
		return getStringElementAccess().getRule();
	}
	
	//BaseValue:
	//	FloatValue | FloatExpValue | IntValue | IdValue;
	public BaseValueElements getBaseValueAccess() {
		return pBaseValue;
	}
	
	public ParserRule getBaseValueRule() {
		return getBaseValueAccess().getRule();
	}
	
	//FloatValue:
	//	FLOAT;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//FloatExpValue:
	//	FLOAT_X;
	public FloatExpValueElements getFloatExpValueAccess() {
		return pFloatExpValue;
	}
	
	public ParserRule getFloatExpValueRule() {
		return getFloatExpValueAccess().getRule();
	}
	
	//IntValue:
	//	INT_X;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//IdValue:
	//	ID;
	public IdValueElements getIdValueAccess() {
		return pIdValue;
	}
	
	public ParserRule getIdValueRule() {
		return getIdValueAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	'-'? INT '.' INT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal FLOAT_X returns ecore::EFloat:
	//	'-'? INT 'e-' INT;
	public TerminalRule getFLOAT_XRule() {
		return tFLOAT_X;
	}
	
	//terminal INT_X returns ecore::EInt:
	//	'-'? INT;
	public TerminalRule getINT_XRule() {
		return tINT_X;
	}
	
	//terminal ID:
	//	'$'? '^'? ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')+ ('.' ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')+)?;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
