/*
 * generated by Xtext 2.13.0
 */
grammar InternalSimulink;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.services.SimulinkGrammarAccess;

}
@parser::members {
	private SimulinkGrammarAccess grammarAccess;

	public void setGrammarAccess(SimulinkGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRoot
entryRuleRoot
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRootAccess().getRootElementAssignment()); }
		(rule__Root__RootElementAssignment)*
		{ after(grammarAccess.getRootAccess().getRootElementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubElement
entryRuleSubElement
:
{ before(grammarAccess.getSubElementRule()); }
	 ruleSubElement
{ after(grammarAccess.getSubElementRule()); } 
	 EOF 
;

// Rule SubElement
ruleSubElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubElementAccess().getGroup()); }
		(rule__SubElement__Group__0)
		{ after(grammarAccess.getSubElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseElement
entryRuleBaseElement
:
{ before(grammarAccess.getBaseElementRule()); }
	 ruleBaseElement
{ after(grammarAccess.getBaseElementRule()); } 
	 EOF 
;

// Rule BaseElement
ruleBaseElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseElementAccess().getGroup()); }
		(rule__BaseElement__Group__0)
		{ after(grammarAccess.getBaseElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVectorElement
entryRuleVectorElement
:
{ before(grammarAccess.getVectorElementRule()); }
	 ruleVectorElement
{ after(grammarAccess.getVectorElementRule()); } 
	 EOF 
;

// Rule VectorElement
ruleVectorElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVectorElementAccess().getGroup()); }
		(rule__VectorElement__Group__0)
		{ after(grammarAccess.getVectorElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMatrixElement
entryRuleMatrixElement
:
{ before(grammarAccess.getMatrixElementRule()); }
	 ruleMatrixElement
{ after(grammarAccess.getMatrixElementRule()); } 
	 EOF 
;

// Rule MatrixElement
ruleMatrixElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMatrixElementAccess().getGroup()); }
		(rule__MatrixElement__Group__0)
		{ after(grammarAccess.getMatrixElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringElement
entryRuleStringElement
:
{ before(grammarAccess.getStringElementRule()); }
	 ruleStringElement
{ after(grammarAccess.getStringElementRule()); } 
	 EOF 
;

// Rule StringElement
ruleStringElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringElementAccess().getGroup()); }
		(rule__StringElement__Group__0)
		{ after(grammarAccess.getStringElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseValue
entryRuleBaseValue
:
{ before(grammarAccess.getBaseValueRule()); }
	 ruleBaseValue
{ after(grammarAccess.getBaseValueRule()); } 
	 EOF 
;

// Rule BaseValue
ruleBaseValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseValueAccess().getAlternatives()); }
		(rule__BaseValue__Alternatives)
		{ after(grammarAccess.getBaseValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatValue
entryRuleFloatValue
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatValueAccess().getFLOATTerminalRuleCall()); }
		RULE_FLOAT
		{ after(grammarAccess.getFloatValueAccess().getFLOATTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatExpValue
entryRuleFloatExpValue
:
{ before(grammarAccess.getFloatExpValueRule()); }
	 ruleFloatExpValue
{ after(grammarAccess.getFloatExpValueRule()); } 
	 EOF 
;

// Rule FloatExpValue
ruleFloatExpValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatExpValueAccess().getFLOAT_XTerminalRuleCall()); }
		RULE_FLOAT_X
		{ after(grammarAccess.getFloatExpValueAccess().getFLOAT_XTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntValue
entryRuleIntValue
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntValueAccess().getINT_XTerminalRuleCall()); }
		RULE_INT_X
		{ after(grammarAccess.getIntValueAccess().getINT_XTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdValue
entryRuleIdValue
:
{ before(grammarAccess.getIdValueRule()); }
	 ruleIdValue
{ after(grammarAccess.getIdValueRule()); } 
	 EOF 
;

// Rule IdValue
ruleIdValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdValueAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getIdValueAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getSubElementParserRuleCall_0()); }
		ruleSubElement
		{ after(grammarAccess.getElementAccess().getSubElementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getBaseElementParserRuleCall_1()); }
		ruleBaseElement
		{ after(grammarAccess.getElementAccess().getBaseElementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getVectorElementParserRuleCall_2()); }
		ruleVectorElement
		{ after(grammarAccess.getElementAccess().getVectorElementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getMatrixElementParserRuleCall_3()); }
		ruleMatrixElement
		{ after(grammarAccess.getElementAccess().getMatrixElementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getStringElementParserRuleCall_4()); }
		ruleStringElement
		{ after(grammarAccess.getElementAccess().getStringElementParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseValueAccess().getFloatValueParserRuleCall_0()); }
		ruleFloatValue
		{ after(grammarAccess.getBaseValueAccess().getFloatValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBaseValueAccess().getFloatExpValueParserRuleCall_1()); }
		ruleFloatExpValue
		{ after(grammarAccess.getBaseValueAccess().getFloatExpValueParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBaseValueAccess().getIntValueParserRuleCall_2()); }
		ruleIntValue
		{ after(grammarAccess.getBaseValueAccess().getIntValueParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBaseValueAccess().getIdValueParserRuleCall_3()); }
		ruleIdValue
		{ after(grammarAccess.getBaseValueAccess().getIdValueParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubElement__Group__0__Impl
	rule__SubElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubElementAccess().getNameAssignment_0()); }
	(rule__SubElement__NameAssignment_0)
	{ after(grammarAccess.getSubElementAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubElement__Group__1__Impl
	rule__SubElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubElementAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSubElementAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubElement__Group__2__Impl
	rule__SubElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubElementAccess().getElementAssignment_2()); }
	(rule__SubElement__ElementAssignment_2)*
	{ after(grammarAccess.getSubElementAccess().getElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubElement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubElementAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getSubElementAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseElement__Group__0__Impl
	rule__BaseElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseElementAccess().getNameAssignment_0()); }
	(rule__BaseElement__NameAssignment_0)
	{ after(grammarAccess.getBaseElementAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseElementAccess().getValueAssignment_1()); }
	(rule__BaseElement__ValueAssignment_1)
	{ after(grammarAccess.getBaseElementAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VectorElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VectorElement__Group__0__Impl
	rule__VectorElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorElementAccess().getNameAssignment_0()); }
	(rule__VectorElement__NameAssignment_0)
	{ after(grammarAccess.getVectorElementAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VectorElement__Group__1__Impl
	rule__VectorElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorElementAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getVectorElementAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VectorElement__Group__2__Impl
	rule__VectorElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorElementAccess().getValueAssignment_2()); }
	(rule__VectorElement__ValueAssignment_2)?
	{ after(grammarAccess.getVectorElementAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VectorElement__Group__3__Impl
	rule__VectorElement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorElementAccess().getGroup_3()); }
	(rule__VectorElement__Group_3__0)*
	{ after(grammarAccess.getVectorElementAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VectorElement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorElementAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getVectorElementAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VectorElement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VectorElement__Group_3__0__Impl
	rule__VectorElement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorElementAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getVectorElementAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VectorElement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorElementAccess().getValueAssignment_3_1()); }
	(rule__VectorElement__ValueAssignment_3_1)
	{ after(grammarAccess.getVectorElementAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MatrixElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group__0__Impl
	rule__MatrixElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getNameAssignment_0()); }
	(rule__MatrixElement__NameAssignment_0)
	{ after(grammarAccess.getMatrixElementAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group__1__Impl
	rule__MatrixElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getMatrixElementAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group__2__Impl
	rule__MatrixElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getValueAssignment_2()); }
	(rule__MatrixElement__ValueAssignment_2)?
	{ after(grammarAccess.getMatrixElementAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group__3__Impl
	rule__MatrixElement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getGroup_3()); }
	(rule__MatrixElement__Group_3__0)*
	{ after(grammarAccess.getMatrixElementAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group__4__Impl
	rule__MatrixElement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMatrixElementAccess().getGroup_4()); }
		(rule__MatrixElement__Group_4__0)
		{ after(grammarAccess.getMatrixElementAccess().getGroup_4()); }
	)
	(
		{ before(grammarAccess.getMatrixElementAccess().getGroup_4()); }
		(rule__MatrixElement__Group_4__0)*
		{ after(grammarAccess.getMatrixElementAccess().getGroup_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getMatrixElementAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MatrixElement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group_3__0__Impl
	rule__MatrixElement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getMatrixElementAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getValueAssignment_3_1()); }
	(rule__MatrixElement__ValueAssignment_3_1)
	{ after(grammarAccess.getMatrixElementAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MatrixElement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group_4__0__Impl
	rule__MatrixElement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getSemicolonKeyword_4_0()); }
	';'
	{ after(grammarAccess.getMatrixElementAccess().getSemicolonKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group_4__1__Impl
	rule__MatrixElement__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getValueAssignment_4_1()); }
	(rule__MatrixElement__ValueAssignment_4_1)?
	{ after(grammarAccess.getMatrixElementAccess().getValueAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getGroup_4_2()); }
	(rule__MatrixElement__Group_4_2__0)*
	{ after(grammarAccess.getMatrixElementAccess().getGroup_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MatrixElement__Group_4_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group_4_2__0__Impl
	rule__MatrixElement__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_4_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getCommaKeyword_4_2_0()); }
	','
	{ after(grammarAccess.getMatrixElementAccess().getCommaKeyword_4_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_4_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatrixElement__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__Group_4_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatrixElementAccess().getValueAssignment_4_2_1()); }
	(rule__MatrixElement__ValueAssignment_4_2_1)
	{ after(grammarAccess.getMatrixElementAccess().getValueAssignment_4_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringElement__Group__0__Impl
	rule__StringElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringElementAccess().getNameAssignment_0()); }
	(rule__StringElement__NameAssignment_0)
	{ after(grammarAccess.getStringElementAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringElement__Group__1__Impl
	rule__StringElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringElementAccess().getValueAssignment_1()); }
	(rule__StringElement__ValueAssignment_1)
	{ after(grammarAccess.getStringElementAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringElementAccess().getValueAssignment_2()); }
	(rule__StringElement__ValueAssignment_2)*
	{ after(grammarAccess.getStringElementAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__RootElementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootAccess().getRootElementSubElementParserRuleCall_0()); }
		ruleSubElement
		{ after(grammarAccess.getRootAccess().getRootElementSubElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubElementAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSubElementAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubElement__ElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubElementAccess().getElementElementParserRuleCall_2_0()); }
		ruleElement
		{ after(grammarAccess.getSubElementAccess().getElementElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseElement__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseElementAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getBaseElementAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseElement__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseElementAccess().getValueBaseValueParserRuleCall_1_0()); }
		ruleBaseValue
		{ after(grammarAccess.getBaseElementAccess().getValueBaseValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorElementAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVectorElementAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorElementAccess().getValueBaseValueParserRuleCall_2_0()); }
		ruleBaseValue
		{ after(grammarAccess.getVectorElementAccess().getValueBaseValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorElement__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorElementAccess().getValueBaseValueParserRuleCall_3_1_0()); }
		ruleBaseValue
		{ after(grammarAccess.getVectorElementAccess().getValueBaseValueParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatrixElementAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getMatrixElementAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatrixElementAccess().getValueBaseValueParserRuleCall_2_0()); }
		ruleBaseValue
		{ after(grammarAccess.getMatrixElementAccess().getValueBaseValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatrixElementAccess().getValueBaseValueParserRuleCall_3_1_0()); }
		ruleBaseValue
		{ after(grammarAccess.getMatrixElementAccess().getValueBaseValueParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__ValueAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatrixElementAccess().getValueBaseValueParserRuleCall_4_1_0()); }
		ruleBaseValue
		{ after(grammarAccess.getMatrixElementAccess().getValueBaseValueParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixElement__ValueAssignment_4_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatrixElementAccess().getValueBaseValueParserRuleCall_4_2_1_0()); }
		ruleBaseValue
		{ after(grammarAccess.getMatrixElementAccess().getValueBaseValueParserRuleCall_4_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringElementAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getStringElementAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringElementAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringElementAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringElement__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringElementAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringElementAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_FLOAT : '-'? RULE_INT '.' RULE_INT;

RULE_FLOAT_X : '-'? RULE_INT 'e-' RULE_INT;

RULE_INT_X : '-'? RULE_INT;

RULE_ID : '$'? '^'? ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')+ ('.' ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')+)?;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
